// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id Int @id @default(autoincrement())

    name             String?
    email            String    @unique
    phoneNumber      String?
    emailVerified    DateTime?
    image            String?
    idProof          String?
    usn              String?
    yearofGraduation Int?
    role             Role      @default(USER)
    attendedDay1     Boolean   @default(false)
    attendedDay2     Boolean   @default(false)

    PaymentOrder PaymentOrder[]

    accounts Account[]
    sessions Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PaymentOrder {
    id String @id @default(cuid())

    rzpOrderID   String  @unique
    rzpPaymentID String? @unique
    status       Status  @default(PENDING)
    amount       Int

    paymentData Json?

    userId Int
    User   User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ClientSettings {
    id  Int @id @default(autoincrement())
    day Day @default(DAY1)
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  sessionUserName String   // User performing action
  audit_type      String   // Type of audit entry
  dateTime        DateTime @default(now())
  description     String   // Audit details
}

enum Role {
    ADMIN
    USER
    PRONITECOM
    ALUMNI
    UNVERIFIED
    VOLUNTEER
    VERIFIER
    SCAMMER
}

enum Day {
    DAY1
    DAY2
}

enum Status {
    PENDING
    SUCCESS
    FAILED
    REFUNDED
}
