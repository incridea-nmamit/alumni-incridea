// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             Int         @id @default(autoincrement())
    name           String?
    email          String      @unique
    phoneNumber    String?     // Add this line
    emailVerified  DateTime?
    image          String?
    role           Role        @default(USER)
    passClaimed    Boolean     @default(false)
    attendedDay1   Boolean     @default(false)
    attendedDay2   Boolean     @default(false)
    captureUpdated Boolean     @default(false)
    ExtraPass      ExtraPass[]
    accounts       Account[]
    sessions       Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ExtraPass {
    id           Int      @id @default(autoincrement())
    name         String
    relation     Relation
    age          Int
    idProof      String
    attendedDay1 Boolean  @default(false)
    attendedDay2 Boolean  @default(false)

    DependantOn User @relation(fields: [userId], references: [id])
    userId      Int

    createdAt DateTime @default(now())
}

model ClientSettings {
    id  Int @id @default(autoincrement())
    day Day @default(DAY1)
}

enum Relation {
    PARENT
    CHILD
    SIBLING
    SPOUSE
}

enum Role {
    ADMIN
    USER
    VOLUNTEER
}

enum Day {
    DAY1
    DAY2
}
